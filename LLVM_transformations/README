Print instructions
  llvm/0  code/0  make

You can use cat-c as we used clang. For example, let's generate the bitcode
  llvm/0  code/0  make hello_world_from_bitcode_to_bitcode.bc

Let's print instructions using basic blocks
  llvm/1  code/0  make

LLVM variables
  - LLVM bitcode doesn't have variables
  - Instructions are Users, which are Values

We are going to see code transformations now.

Let's start a pass that transform code only by modifying instructions (no adding/deleting instructions)
  llvm/2  code/1  make: low level API

  llvm/3  code/1  make: high level API

Let's start a pass that transform code only by adding instructions
  llvm/4  code/1  make: there is a bug. 
                        Run both binaries (unoptimized and optimized) and check the results (they don't match). 
                        Recompile and re-run: different output between compilations. 
                        The bug is we have replaced all uses with the new value including the one used in MulInst.

  llvm/5  code/1  make: the bug is still there

  llvm/6  code/1  make: "correct" version. We modify uses while we iterate over them. This might lead to a bug.

  llvm/7  code/1  make: correct version. 

Let's start a pass that transform code only by replacing instructions
  llvm/8   code/3  make: This version has a bug.  
                         We have removed an instruction while we were iterating over them.

  llvm/9   code/3  make: "Correct" version.

  llvm/10  code/3  make: "Correct" version. 
                         Let's help us debugging by naming variables.

  llvm/11  code/3  make: "Correct" version. 
                         Let's use the verifier to help us.

  llvm/12  code/3  make: This is actually correct.
                         This version doesn't iterate over elements that could be destroyed by LLVM (e.g., Use *).

  llvm/13  code/3  make: A shorter correct version.

  llvm/14  code/3  make: We show the value of the verifier. This version breaks the SSA form.
